#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfoLeafs.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DatabaseUsers")]
	public partial class DataProjectDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertNewsFeed(NewsFeed instance);
    partial void UpdateNewsFeed(NewsFeed instance);
    partial void DeleteNewsFeed(NewsFeed instance);
    partial void InsertNewsFeedContent(NewsFeedContent instance);
    partial void UpdateNewsFeedContent(NewsFeedContent instance);
    partial void DeleteNewsFeedContent(NewsFeedContent instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataProjectDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseUsersConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataProjectDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProjectDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProjectDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProjectDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NewsFeed> NewsFeed
		{
			get
			{
				return this.GetTable<NewsFeed>();
			}
		}
		
		public System.Data.Linq.Table<NewsFeedContent> NewsFeedContent
		{
			get
			{
				return this.GetTable<NewsFeedContent>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscription
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsFeed")]
	public partial class NewsFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _NewsFeedId;
		
		private System.DateTime _DataTimePublication;
		
		private EntityRef<NewsFeedContent> _NewsFeedContent;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNewsFeedIdChanging(int value);
    partial void OnNewsFeedIdChanged();
    partial void OnDataTimePublicationChanging(System.DateTime value);
    partial void OnDataTimePublicationChanged();
    #endregion
		
		public NewsFeed()
		{
			this._NewsFeedContent = default(EntityRef<NewsFeedContent>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsFeedId", DbType="Int NOT NULL")]
		public int NewsFeedId
		{
			get
			{
				return this._NewsFeedId;
			}
			set
			{
				if ((this._NewsFeedId != value))
				{
					if (this._NewsFeedContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsFeedIdChanging(value);
					this.SendPropertyChanging();
					this._NewsFeedId = value;
					this.SendPropertyChanged("NewsFeedId");
					this.OnNewsFeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTimePublication", DbType="DateTime NOT NULL")]
		public System.DateTime DataTimePublication
		{
			get
			{
				return this._DataTimePublication;
			}
			set
			{
				if ((this._DataTimePublication != value))
				{
					this.OnDataTimePublicationChanging(value);
					this.SendPropertyChanging();
					this._DataTimePublication = value;
					this.SendPropertyChanged("DataTimePublication");
					this.OnDataTimePublicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsFeedContent_NewsFeed", Storage="_NewsFeedContent", ThisKey="NewsFeedId", OtherKey="Id", IsForeignKey=true)]
		public NewsFeedContent NewsFeedContent
		{
			get
			{
				return this._NewsFeedContent.Entity;
			}
			set
			{
				NewsFeedContent previousValue = this._NewsFeedContent.Entity;
				if (((previousValue != value) 
							|| (this._NewsFeedContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsFeedContent.Entity = null;
						previousValue.NewsFeed.Remove(this);
					}
					this._NewsFeedContent.Entity = value;
					if ((value != null))
					{
						value.NewsFeed.Add(this);
						this._NewsFeedId = value.Id;
					}
					else
					{
						this._NewsFeedId = default(int);
					}
					this.SendPropertyChanged("NewsFeedContent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_NewsFeed", Storage="_Users", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.NewsFeed.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.NewsFeed.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsFeedContent")]
	public partial class NewsFeedContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Content;
		
		private EntitySet<NewsFeed> _NewsFeed;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public NewsFeedContent()
		{
			this._NewsFeed = new EntitySet<NewsFeed>(new Action<NewsFeed>(this.attach_NewsFeed), new Action<NewsFeed>(this.detach_NewsFeed));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsFeedContent_NewsFeed", Storage="_NewsFeed", ThisKey="Id", OtherKey="NewsFeedId")]
		public EntitySet<NewsFeed> NewsFeed
		{
			get
			{
				return this._NewsFeed;
			}
			set
			{
				this._NewsFeed.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewsFeed(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.NewsFeedContent = this;
		}
		
		private void detach_NewsFeed(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.NewsFeedContent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdUser;
		
		private int _IdSubscriber;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Users> _Users1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnIdSubscriberChanging(int value);
    partial void OnIdSubscriberChanged();
    #endregion
		
		public Subscription()
		{
			this._Users = default(EntityRef<Users>);
			this._Users1 = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int NOT NULL")]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSubscriber", DbType="Int NOT NULL")]
		public int IdSubscriber
		{
			get
			{
				return this._IdSubscriber;
			}
			set
			{
				if ((this._IdSubscriber != value))
				{
					if (this._Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSubscriberChanging(value);
					this.SendPropertyChanging();
					this._IdSubscriber = value;
					this.SendPropertyChanged("IdSubscriber");
					this.OnIdSubscriberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Subscription", Storage="_Users", ThisKey="IdUser", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Subscription.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Subscription.Add(this);
						this._IdUser = value.Id;
					}
					else
					{
						this._IdUser = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Subscription1", Storage="_Users1", ThisKey="IdSubscriber", OtherKey="Id", IsForeignKey=true)]
		public Users Users1
		{
			get
			{
				return this._Users1.Entity;
			}
			set
			{
				Users previousValue = this._Users1.Entity;
				if (((previousValue != value) 
							|| (this._Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users1.Entity = null;
						previousValue.Subscription1.Remove(this);
					}
					this._Users1.Entity = value;
					if ((value != null))
					{
						value.Subscription1.Add(this);
						this._IdSubscriber = value.Id;
					}
					else
					{
						this._IdSubscriber = default(int);
					}
					this.SendPropertyChanged("Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _Password;
		
		private string _AvatarPath;
		
		private EntitySet<NewsFeed> _NewsFeed;
		
		private EntitySet<Subscription> _Subscription;
		
		private EntitySet<Subscription> _Subscription1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAvatarPathChanging(string value);
    partial void OnAvatarPathChanged();
    #endregion
		
		public Users()
		{
			this._NewsFeed = new EntitySet<NewsFeed>(new Action<NewsFeed>(this.attach_NewsFeed), new Action<NewsFeed>(this.detach_NewsFeed));
			this._Subscription = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscription), new Action<Subscription>(this.detach_Subscription));
			this._Subscription1 = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscription1), new Action<Subscription>(this.detach_Subscription1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath", DbType="NVarChar(50)")]
		public string AvatarPath
		{
			get
			{
				return this._AvatarPath;
			}
			set
			{
				if ((this._AvatarPath != value))
				{
					this.OnAvatarPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPath = value;
					this.SendPropertyChanged("AvatarPath");
					this.OnAvatarPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_NewsFeed", Storage="_NewsFeed", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<NewsFeed> NewsFeed
		{
			get
			{
				return this._NewsFeed;
			}
			set
			{
				this._NewsFeed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Subscription", Storage="_Subscription", ThisKey="Id", OtherKey="IdUser")]
		public EntitySet<Subscription> Subscription
		{
			get
			{
				return this._Subscription;
			}
			set
			{
				this._Subscription.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Subscription1", Storage="_Subscription1", ThisKey="Id", OtherKey="IdSubscriber")]
		public EntitySet<Subscription> Subscription1
		{
			get
			{
				return this._Subscription1;
			}
			set
			{
				this._Subscription1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewsFeed(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_NewsFeed(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Subscription(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Subscription(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Subscription1(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = this;
		}
		
		private void detach_Subscription1(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = null;
		}
	}
}
#pragma warning restore 1591
